#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node *next;
};


struct Node* createCircularList(int data) {
    struct Node *newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = newNode;  // Pointing to itself to make it circular
    return newNode;
}

void insertAtBeginning(struct Node **head, int data) {
    struct Node *newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    
    if (*head == NULL) {
        
        *head = newNode;
        newNode->next = newNode;
    } else {
        struct Node *temp = *head;
      
        while (temp->next != *head) {
            temp = temp->next;
        }
      
        temp->next = newNode;
        newNode->next = *head;
        *head = newNode;
    }
}


void insertAtPosition(struct Node **head, int data, int position) {
    struct Node *newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    
    if (position == 1) {
        insertAtBeginning(head, data);
        return;
    }
    
    struct Node *temp = *head;
    for (int i = 1; i < position - 1 && temp != NULL; i++) {
        temp = temp->next;
    }

    if (temp == NULL) {
        printf("The position is out of range.\n");
    } else {
        newNode->next = temp->next;
        temp->next = newNode;
    }
}


void insertAtEnd(struct Node **head, int data) {
    struct Node *newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;

    if (*head == NULL) {
       
        *head = newNode;
        newNode->next = newNode;
    } else {
        struct Node *temp = *head;
       
        while (temp->next != *head) {
            temp = temp->next;
        }
    
        temp->next = newNode;
        newNode->next = *head;
    }
}


void deleteAtBeginning(struct Node **head) {
    if (*head == NULL) {
        printf("The list is empty, nothing to delete.\n");
        return;
    }

    struct Node *temp = *head;
    if (temp->next == *head) {
       
        free(temp);
        *head = NULL;
    } else {
        struct Node *last = *head;
        while (last->next != *head) {
            last = last->next;
        }
     
        last->next = temp->next;
        *head = temp->next;
        free(temp);
    }
}


void deleteAtPosition(struct Node **head, int position) {
    if (*head == NULL) {
        printf("The list is empty, nothing to delete.\n");
        return;
    }

    struct Node *temp = *head;
    if (position == 1) {
        deleteAtBeginning(head);
        return;
    }

    for (int i = 1; i < position - 1 && temp != NULL; i++) {
        temp = temp->next;
    }

    if (temp == NULL || temp->next == *head) {
        printf("The position is out of range.\n");
    } else {
        struct Node *delNode = temp->next;
        temp->next = delNode->next;
        free(delNode);
    }
}


void deleteAtEnd(struct Node **head) {
    if (*head == NULL) {
        printf("The list is empty, nothing to delete.\n");
        return;
    }

    struct Node *temp = *head;
    if (temp->next == *head) {
       
        free(temp);
        *head = NULL;
    } else {
        while (temp->next->next != *head) {
            temp = temp->next;
        }
        struct Node *delNode = temp->next;
        temp->next = *head;
        free(delNode);
    }
}


void displayList(struct Node *head) {
    if (head == NULL) {
        printf("The list is empty.\n");
        return;
    }
    
    struct Node *temp = head;
    do {
        printf("%d -> ", temp->data);
        temp = temp->next;
    } while (temp != head);
    
    printf("(head)\n");
}

int main() {
    struct Node *head = NULL;
    int choice, data, position;

    while(1) {
      
        printf("\nCircular Linked List Operations\n");
        printf("1. Insert at Beginning\n");
        printf("2. Insert at Position\n");
        printf("3. Insert at End\n");
        printf("4. Delete at Beginning\n");
        printf("5. Delete at Position\n");
        printf("6. Delete at End\n");
        printf("7. Display List\n");
        printf("8. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch(choice) {
            case 1:
                printf("Enter data to insert at the beginning: ");
                scanf("%d", &data);
                insertAtBeginning(&head, data);
                break;
            case 2:
                printf("Enter position to insert at: ");
                scanf("%d", &position);
                printf("Enter data to insert at position %d: ", position);
                scanf("%d", &data);
                insertAtPosition(&head, data, position);
                break;
            case 3:
                printf("Enter data to insert at the end: ");
                scanf("%d", &data);
                insertAtEnd(&head, data);
                break;
            case 4:
                deleteAtBeginning(&head);
                break;
            case 5:
                printf("Enter position to delete at: ");
                scanf("%d", &position);
                deleteAtPosition(&head, position);
                break;
            case 6:
                deleteAtEnd(&head);
                break;
            case 7:
                printf("Circular Linked List: ");
                displayList(head);
                break;
            case 8:
                printf("Exiting program.\n");
                exit(0);
            default:
                printf("Invalid choice! Please try again.\n");
        }
    }

    return 0;
}
